/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;



public partial class Position : TBase
{
  private int _x;
  private int _y;

  public int X
  {
    get
    {
      return _x;
    }
    set
    {
      __isset.x = true;
      this._x = value;
    }
  }

  public int Y
  {
    get
    {
      return _y;
    }
    set
    {
      __isset.y = true;
      this._y = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool x;
    public bool y;
  }

  public Position()
  {
  }

  public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32)
            {
              X = await iprot.ReadI32Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.I32)
            {
              Y = await iprot.ReadI32Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var struc = new TStruct("Position");
      await oprot.WriteStructBeginAsync(struc, cancellationToken);
      var field = new TField();
      if (__isset.x)
      {
        field.Name = "x";
        field.Type = TType.I32;
        field.ID = 1;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI32Async(X, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.y)
      {
        field.Name = "y";
        field.Type = TType.I32;
        field.ID = 2;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI32Async(Y, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override bool Equals(object that)
  {
    var other = that as Position;
    if (other == null) return false;
    if (ReferenceEquals(this, other)) return true;
    return ((__isset.x == other.__isset.x) && ((!__isset.x) || (System.Object.Equals(X, other.X))))
      && ((__isset.y == other.__isset.y) && ((!__isset.y) || (System.Object.Equals(Y, other.Y))));
  }

  public override int GetHashCode() {
    int hashcode = 157;
    unchecked {
      if(__isset.x)
        hashcode = (hashcode * 397) + X.GetHashCode();
      if(__isset.y)
        hashcode = (hashcode * 397) + Y.GetHashCode();
    }
    return hashcode;
  }

  public override string ToString()
  {
    var sb = new StringBuilder("Position(");
    bool __first = true;
    if (__isset.x)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("X: ");
      sb.Append(X);
    }
    if (__isset.y)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Y: ");
      sb.Append(Y);
    }
    sb.Append(")");
    return sb.ToString();
  }
}

